// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: complete.proto

package s12_complete

import (
	fmt "fmt"
	_ "github.com/SafetyCulture/s12-proto/protobuf/s12proto"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type MsgRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgRequest) Reset()         { *m = MsgRequest{} }
func (m *MsgRequest) String() string { return proto.CompactTextString(m) }
func (*MsgRequest) ProtoMessage()    {}
func (*MsgRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e07686b0939113b7, []int{0}
}
func (m *MsgRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MsgRequest.Unmarshal(m, b)
}
func (m *MsgRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MsgRequest.Marshal(b, m, deterministic)
}
func (m *MsgRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequest.Merge(m, src)
}
func (m *MsgRequest) XXX_Size() int {
	return xxx_messageInfo_MsgRequest.Size(m)
}
func (m *MsgRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequest proto.InternalMessageInfo

type MsgResponse struct {
	Id                   string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Completed            []*Complete `protobuf:"bytes,2,rep,name=completed,proto3" json:"completed,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *MsgResponse) Reset()         { *m = MsgResponse{} }
func (m *MsgResponse) String() string { return proto.CompactTextString(m) }
func (*MsgResponse) ProtoMessage()    {}
func (*MsgResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e07686b0939113b7, []int{1}
}
func (m *MsgResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MsgResponse.Unmarshal(m, b)
}
func (m *MsgResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MsgResponse.Marshal(b, m, deterministic)
}
func (m *MsgResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgResponse.Merge(m, src)
}
func (m *MsgResponse) XXX_Size() int {
	return xxx_messageInfo_MsgResponse.Size(m)
}
func (m *MsgResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgResponse proto.InternalMessageInfo

func (m *MsgResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MsgResponse) GetCompleted() []*Complete {
	if m != nil {
		return m.Completed
	}
	return nil
}

type Complete struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status               string   `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Description          string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Email                string   `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	NotEmail             string   `protobuf:"bytes,5,opt,name=not_email,json=notEmail,proto3" json:"not_email,omitempty"`
	Phone                string   `protobuf:"bytes,6,opt,name=phone,proto3" json:"phone,omitempty"`
	Word                 []string `protobuf:"bytes,7,rep,name=word,proto3" json:"word,omitempty"`
	Url                  string   `protobuf:"bytes,8,opt,name=url,proto3" json:"url,omitempty"`
	SingleNumber         int32    `protobuf:"varint,9,opt,name=single_number,json=singleNumber,proto3" json:"single_number,omitempty"`
	RepeatedNumber       []int64  `protobuf:"varint,10,rep,packed,name=repeated_number,json=repeatedNumber,proto3" json:"repeated_number,omitempty"`
	Lat                  int32    `protobuf:"varint,11,opt,name=lat,proto3" json:"lat,omitempty"`
	Lng                  int32    `protobuf:"varint,12,opt,name=lng,proto3" json:"lng,omitempty"`
	Words                string   `protobuf:"bytes,13,opt,name=words,proto3" json:"words,omitempty"`
	Wordsn               string   `protobuf:"bytes,14,opt,name=wordsn,proto3" json:"wordsn,omitempty"`
	Intn                 int32    `protobuf:"varint,15,opt,name=intn,proto3" json:"intn,omitempty"`
	Fullname             string   `protobuf:"bytes,16,opt,name=fullname,proto3" json:"fullname,omitempty"`
	Firstname            string   `protobuf:"bytes,17,opt,name=firstname,proto3" json:"firstname,omitempty"`
	Lastname             string   `protobuf:"bytes,18,opt,name=lastname,proto3" json:"lastname,omitempty"`
	Paragraph            string   `protobuf:"bytes,19,opt,name=paragraph,proto3" json:"paragraph,omitempty"`
	Paragraphs           string   `protobuf:"bytes,20,opt,name=paragraphs,proto3" json:"paragraphs,omitempty"`
	Paragraphsn          string   `protobuf:"bytes,21,opt,name=paragraphsn,proto3" json:"paragraphsn,omitempty"`
	Uuid                 string   `protobuf:"bytes,22,opt,name=uuid,proto3" json:"uuid,omitempty"`
	EmailAddress         string   `protobuf:"bytes,23,opt,name=email_address,json=emailAddress,proto3" json:"email_address,omitempty"`
	PhoneNumber          string   `protobuf:"bytes,24,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	Company              string   `protobuf:"bytes,25,opt,name=company,proto3" json:"company,omitempty"`
	Brand                string   `protobuf:"bytes,26,opt,name=brand,proto3" json:"brand,omitempty"`
	Product              string   `protobuf:"bytes,27,opt,name=product,proto3" json:"product,omitempty"`
	Color                string   `protobuf:"bytes,28,opt,name=color,proto3" json:"color,omitempty"`
	Hexcolor             string   `protobuf:"bytes,29,opt,name=hexcolor,proto3" json:"hexcolor,omitempty"`
	Latitude             float64  `protobuf:"fixed64,30,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude            float64  `protobuf:"fixed64,31,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Floatn               float32  `protobuf:"fixed32,32,opt,name=floatn,proto3" json:"floatn,omitempty"`
	Boolean              bool     `protobuf:"varint,33,opt,name=boolean,proto3" json:"boolean,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Complete) Reset()         { *m = Complete{} }
func (m *Complete) String() string { return proto.CompactTextString(m) }
func (*Complete) ProtoMessage()    {}
func (*Complete) Descriptor() ([]byte, []int) {
	return fileDescriptor_e07686b0939113b7, []int{2}
}
func (m *Complete) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Complete.Unmarshal(m, b)
}
func (m *Complete) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Complete.Marshal(b, m, deterministic)
}
func (m *Complete) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Complete.Merge(m, src)
}
func (m *Complete) XXX_Size() int {
	return xxx_messageInfo_Complete.Size(m)
}
func (m *Complete) XXX_DiscardUnknown() {
	xxx_messageInfo_Complete.DiscardUnknown(m)
}

var xxx_messageInfo_Complete proto.InternalMessageInfo

func (m *Complete) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Complete) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Complete) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Complete) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Complete) GetNotEmail() string {
	if m != nil {
		return m.NotEmail
	}
	return ""
}

func (m *Complete) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *Complete) GetWord() []string {
	if m != nil {
		return m.Word
	}
	return nil
}

func (m *Complete) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Complete) GetSingleNumber() int32 {
	if m != nil {
		return m.SingleNumber
	}
	return 0
}

func (m *Complete) GetRepeatedNumber() []int64 {
	if m != nil {
		return m.RepeatedNumber
	}
	return nil
}

func (m *Complete) GetLat() int32 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *Complete) GetLng() int32 {
	if m != nil {
		return m.Lng
	}
	return 0
}

func (m *Complete) GetWords() string {
	if m != nil {
		return m.Words
	}
	return ""
}

func (m *Complete) GetWordsn() string {
	if m != nil {
		return m.Wordsn
	}
	return ""
}

func (m *Complete) GetIntn() int32 {
	if m != nil {
		return m.Intn
	}
	return 0
}

func (m *Complete) GetFullname() string {
	if m != nil {
		return m.Fullname
	}
	return ""
}

func (m *Complete) GetFirstname() string {
	if m != nil {
		return m.Firstname
	}
	return ""
}

func (m *Complete) GetLastname() string {
	if m != nil {
		return m.Lastname
	}
	return ""
}

func (m *Complete) GetParagraph() string {
	if m != nil {
		return m.Paragraph
	}
	return ""
}

func (m *Complete) GetParagraphs() string {
	if m != nil {
		return m.Paragraphs
	}
	return ""
}

func (m *Complete) GetParagraphsn() string {
	if m != nil {
		return m.Paragraphsn
	}
	return ""
}

func (m *Complete) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Complete) GetEmailAddress() string {
	if m != nil {
		return m.EmailAddress
	}
	return ""
}

func (m *Complete) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *Complete) GetCompany() string {
	if m != nil {
		return m.Company
	}
	return ""
}

func (m *Complete) GetBrand() string {
	if m != nil {
		return m.Brand
	}
	return ""
}

func (m *Complete) GetProduct() string {
	if m != nil {
		return m.Product
	}
	return ""
}

func (m *Complete) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

func (m *Complete) GetHexcolor() string {
	if m != nil {
		return m.Hexcolor
	}
	return ""
}

func (m *Complete) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *Complete) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *Complete) GetFloatn() float32 {
	if m != nil {
		return m.Floatn
	}
	return 0
}

func (m *Complete) GetBoolean() bool {
	if m != nil {
		return m.Boolean
	}
	return false
}

func init() {
	proto.RegisterType((*MsgRequest)(nil), "s12.complete.MsgRequest")
	proto.RegisterType((*MsgResponse)(nil), "s12.complete.MsgResponse")
	proto.RegisterType((*Complete)(nil), "s12.complete.Complete")
}

func init() { proto.RegisterFile("complete.proto", fileDescriptor_e07686b0939113b7) }

var fileDescriptor_e07686b0939113b7 = []byte{
	// 706 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x94, 0x4f, 0x73, 0xe3, 0x34,
	0x18, 0xc6, 0x51, 0xdc, 0x24, 0xce, 0xeb, 0x34, 0x4d, 0x45, 0x69, 0xd5, 0xf4, 0x9f, 0x9a, 0x32,
	0xd4, 0x0c, 0x33, 0x81, 0xa6, 0x1c, 0x38, 0x02, 0x1d, 0x06, 0x2e, 0x65, 0x18, 0xf5, 0xd2, 0x5b,
	0x71, 0x62, 0xd5, 0xf1, 0xe0, 0x48, 0x46, 0x92, 0xa1, 0xbd, 0x71, 0xe4, 0xc8, 0x91, 0xf3, 0x9e,
	0xf6, 0x96, 0xef, 0x94, 0x4f, 0xb2, 0x63, 0xd9, 0x8e, 0xb2, 0xb3, 0x7b, 0xd3, 0xfb, 0x7b, 0x7e,
	0x7e, 0xec, 0x44, 0x1a, 0xc1, 0x60, 0x2e, 0x97, 0x79, 0xc6, 0x0d, 0x9f, 0xe4, 0x4a, 0x1a, 0x89,
	0xfb, 0xfa, 0x66, 0x3a, 0x69, 0xd8, 0xe8, 0x48, 0xdf, 0x4c, 0x2d, 0xff, 0x3a, 0x51, 0xf9, 0x7c,
	0x29, 0xe7, 0x7f, 0x54, 0xda, 0xb8, 0x0f, 0x70, 0xaf, 0x13, 0xc6, 0xff, 0x2c, 0xb8, 0x36, 0xe3,
	0x07, 0x08, 0xec, 0xa4, 0x73, 0x29, 0x34, 0xc7, 0x03, 0x68, 0xa5, 0x31, 0x41, 0x14, 0x85, 0x3d,
	0xd6, 0x4a, 0x63, 0xfc, 0x2d, 0xf4, 0x9a, 0xc6, 0x98, 0xb4, 0xa8, 0x17, 0x06, 0xd3, 0xc3, 0xc9,
	0xf6, 0x7b, 0x26, 0x77, 0xf5, 0x82, 0x39, 0x71, 0xbc, 0xf2, 0xc1, 0x6f, 0xf8, 0x07, 0x95, 0xb7,
	0xd0, 0xd1, 0x26, 0x32, 0x85, 0x26, 0xad, 0x92, 0xfd, 0x78, 0xb2, 0x5e, 0xd1, 0x23, 0x08, 0x52,
	0x41, 0x73, 0x25, 0x13, 0xc5, 0xb5, 0x06, 0xbf, 0xa9, 0x62, 0xb5, 0x8a, 0x29, 0x04, 0x31, 0xd7,
	0x73, 0x95, 0xe6, 0x26, 0x95, 0x82, 0x78, 0xb6, 0x6d, 0x1b, 0xe1, 0x03, 0x68, 0xf3, 0x65, 0x94,
	0x66, 0x64, 0xc7, 0x66, 0xd5, 0x80, 0xaf, 0xa0, 0x27, 0xa4, 0x79, 0xaa, 0x92, 0xb6, 0x7d, 0x5f,
	0x67, 0xbd, 0xa2, 0xad, 0x21, 0x62, 0xbe, 0x90, 0xe6, 0x27, 0x2b, 0x1d, 0x40, 0x3b, 0x5f, 0x48,
	0xc1, 0x49, 0xa7, 0x7a, 0xd4, 0x0e, 0x18, 0xc3, 0xce, 0xdf, 0x52, 0xc5, 0xa4, 0x4b, 0xbd, 0xb0,
	0xc7, 0xec, 0x1a, 0x0f, 0xc1, 0x2b, 0x54, 0x46, 0x7c, 0xeb, 0x95, 0x4b, 0x7c, 0x05, 0xbb, 0x3a,
	0x15, 0x49, 0xc6, 0x9f, 0x44, 0xb1, 0x9c, 0x71, 0x45, 0x7a, 0x14, 0x85, 0x6d, 0xd6, 0xaf, 0xe0,
	0xaf, 0x96, 0xe1, 0x6b, 0xd8, 0x53, 0x3c, 0xe7, 0x91, 0xe1, 0x71, 0xa3, 0x01, 0xf5, 0x42, 0x8f,
	0x0d, 0x1a, 0x5c, 0x8b, 0x43, 0xf0, 0xb2, 0xc8, 0x90, 0xc0, 0x76, 0x94, 0x4b, 0x4b, 0x44, 0x42,
	0xfa, 0x35, 0x11, 0x09, 0x3e, 0x85, 0x76, 0xf9, 0x2d, 0x9a, 0xec, 0xba, 0x9f, 0x43, 0x10, 0xab,
	0x20, 0x3e, 0x87, 0x8e, 0x5d, 0x08, 0x32, 0x70, 0x31, 0x05, 0x56, 0x53, 0x3c, 0x82, 0x9d, 0x54,
	0x18, 0x41, 0xf6, 0xca, 0xc2, 0x2a, 0x0d, 0xdb, 0xcc, 0x32, 0x3c, 0x06, 0xff, 0xb9, 0xc8, 0x32,
	0x11, 0x2d, 0x39, 0x19, 0xba, 0xa7, 0xbf, 0x41, 0x6c, 0xc3, 0xf1, 0xe7, 0xd0, 0x7b, 0x4e, 0x95,
	0x36, 0x56, 0xda, 0x77, 0xd2, 0x77, 0x88, 0xb9, 0xa0, 0x6c, 0xca, 0xa2, 0x5a, 0xc2, 0x4e, 0xfa,
	0x1e, 0xb1, 0x0d, 0x2f, 0x9b, 0xf2, 0x48, 0x45, 0x89, 0x8a, 0xf2, 0x05, 0xf9, 0xd4, 0x49, 0xbf,
	0x20, 0xe6, 0x02, 0xfc, 0x05, 0xc0, 0x66, 0xd0, 0xe4, 0xc0, 0x69, 0xbf, 0x21, 0xb6, 0x95, 0xe0,
	0x10, 0x02, 0x37, 0x09, 0xf2, 0x99, 0x13, 0x1f, 0x5b, 0x6c, 0x3b, 0x2a, 0xff, 0x81, 0xa2, 0x48,
	0x63, 0x72, 0xe8, 0x94, 0xdf, 0x11, 0xb3, 0x0c, 0x7f, 0x05, 0xbb, 0xf6, 0xa8, 0x3c, 0x45, 0x71,
	0x5c, 0x9e, 0x44, 0x72, 0xe4, 0xa4, 0x05, 0x62, 0x7d, 0x1b, 0xfe, 0x50, 0x65, 0xf8, 0x4b, 0xe8,
	0xdb, 0x93, 0xd2, 0x6c, 0x29, 0x71, 0x6e, 0x8e, 0x58, 0x60, 0xb3, 0x7a, 0x5f, 0x29, 0x74, 0xcb,
	0x23, 0x1d, 0x89, 0x57, 0x72, 0xec, 0xac, 0x17, 0xc4, 0x1a, 0x8c, 0xcf, 0xa0, 0x3d, 0x53, 0x91,
	0x88, 0xc9, 0xc8, 0xe6, 0xdd, 0xf5, 0x8a, 0x7a, 0xff, 0x20, 0xc4, 0x2a, 0x8a, 0x2f, 0xa1, 0x9b,
	0x2b, 0x19, 0x17, 0x73, 0x43, 0x4e, 0x9c, 0xf0, 0x2f, 0x42, 0xac, 0xe1, 0x65, 0xc3, 0x5c, 0x66,
	0x52, 0x91, 0x53, 0x27, 0xfc, 0x57, 0x36, 0x58, 0x8a, 0xaf, 0xc1, 0x5f, 0xf0, 0x97, 0xca, 0x38,
	0xb3, 0x46, 0xb0, 0x5e, 0xd1, 0xee, 0xff, 0x08, 0xbd, 0x41, 0xe8, 0x8a, 0x6d, 0x42, 0x3c, 0x2a,
	0xf7, 0xce, 0xa4, 0xa6, 0x88, 0x39, 0x39, 0xa7, 0x28, 0xb4, 0x7b, 0x56, 0xcd, 0xf8, 0x14, 0x7a,
	0x99, 0x14, 0x49, 0x15, 0x5e, 0xd8, 0xd0, 0x01, 0x7c, 0x01, 0x9d, 0xe7, 0x4c, 0x46, 0x46, 0x10,
	0x4a, 0x51, 0xd8, 0xaa, 0x3e, 0xe1, 0x2d, 0xf2, 0x58, 0x8d, 0x31, 0x81, 0xee, 0x4c, 0xca, 0x8c,
	0x47, 0x82, 0x5c, 0x52, 0x14, 0xfa, 0xac, 0x19, 0xa7, 0x8f, 0xb0, 0x7f, 0xff, 0xda, 0x5c, 0x19,
	0x0f, 0x5c, 0xfd, 0x95, 0xce, 0x39, 0xbe, 0x03, 0xf8, 0x99, 0x9b, 0x7b, 0xae, 0x75, 0x94, 0x70,
	0x4c, 0xde, 0xbf, 0x77, 0xdc, 0x1d, 0x36, 0x3a, 0xfe, 0x48, 0x52, 0xdd, 0x67, 0xe3, 0x4f, 0x66,
	0x1d, 0x7b, 0xeb, 0xdd, 0xbe, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x9f, 0x80, 0x8b, 0xba, 0x2e, 0x05,
	0x00, 0x00,
}
