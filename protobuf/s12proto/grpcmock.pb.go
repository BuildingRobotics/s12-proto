// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: grpcmock.proto

package s12proto

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	descriptor "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FieldMock struct {
	// Set the mocked field to a set string value. If repeated will choose one at
	// random.
	String_              []string `protobuf:"bytes,1,rep,name=string" json:"string,omitempty"`
	Word                 *bool    `protobuf:"varint,2,opt,name=word" json:"word,omitempty"`
	Words                *bool    `protobuf:"varint,3,opt,name=words" json:"words,omitempty"`
	Wordsn               *int32   `protobuf:"varint,4,opt,name=wordsn" json:"wordsn,omitempty"`
	Intn                 *int32   `protobuf:"varint,5,opt,name=intn" json:"intn,omitempty"`
	Fullname             *bool    `protobuf:"varint,6,opt,name=fullname" json:"fullname,omitempty"`
	Firstname            *bool    `protobuf:"varint,7,opt,name=firstname" json:"firstname,omitempty"`
	Lastname             *bool    `protobuf:"varint,8,opt,name=lastname" json:"lastname,omitempty"`
	Paragraph            *bool    `protobuf:"varint,9,opt,name=paragraph" json:"paragraph,omitempty"`
	Paragraphs           *bool    `protobuf:"varint,10,opt,name=paragraphs" json:"paragraphs,omitempty"`
	Paragraphsn          *int32   `protobuf:"varint,11,opt,name=paragraphsn" json:"paragraphsn,omitempty"`
	Uuid                 *bool    `protobuf:"varint,12,opt,name=uuid" json:"uuid,omitempty"`
	Email                *bool    `protobuf:"varint,13,opt,name=email" json:"email,omitempty"`
	Phone                *bool    `protobuf:"varint,14,opt,name=phone" json:"phone,omitempty"`
	Company              *bool    `protobuf:"varint,15,opt,name=company" json:"company,omitempty"`
	Brand                *bool    `protobuf:"varint,16,opt,name=brand" json:"brand,omitempty"`
	Product              *bool    `protobuf:"varint,17,opt,name=product" json:"product,omitempty"`
	Color                *bool    `protobuf:"varint,18,opt,name=color" json:"color,omitempty"`
	Hexcolor             *bool    `protobuf:"varint,19,opt,name=hexcolor" json:"hexcolor,omitempty"`
	Prefix               []string `protobuf:"bytes,20,rep,name=prefix" json:"prefix,omitempty"`
	Floatn               *int32   `protobuf:"varint,21,opt,name=floatn" json:"floatn,omitempty"`
	Repeatn              *int32   `protobuf:"varint,22,opt,name=repeatn" json:"repeatn,omitempty"`
	Intstr               *bool    `protobuf:"varint,23,opt,name=intstr" json:"intstr,omitempty"`
	Floatstr             *bool    `protobuf:"varint,24,opt,name=floatstr" json:"floatstr,omitempty"`
	Url                  *bool    `protobuf:"varint,25,opt,name=url" json:"url,omitempty"`
	Suffix               []string `protobuf:"bytes,26,rep,name=suffix" json:"suffix,omitempty"`
	City                 *bool    `protobuf:"varint,27,opt,name=city" json:"city,omitempty"`
	Country              *bool    `protobuf:"varint,28,opt,name=country" json:"country,omitempty"`
	Continent            *bool    `protobuf:"varint,29,opt,name=continent" json:"continent,omitempty"`
	Gender               *bool    `protobuf:"varint,30,opt,name=gender" json:"gender,omitempty"`
	Ipv4                 *bool    `protobuf:"varint,31,opt,name=ipv4" json:"ipv4,omitempty"`
	Ipv6                 *bool    `protobuf:"varint,32,opt,name=ipv6" json:"ipv6,omitempty"`
	Latitude             *bool    `protobuf:"varint,33,opt,name=latitude" json:"latitude,omitempty"`
	Longitude            *bool    `protobuf:"varint,34,opt,name=longitude" json:"longitude,omitempty"`
	Month                *bool    `protobuf:"varint,35,opt,name=month" json:"month,omitempty"`
	MonthShort           *bool    `protobuf:"varint,36,opt,name=month_short,json=monthShort" json:"month_short,omitempty"`
	SimplePassword       *bool    `protobuf:"varint,37,opt,name=simple_password,json=simplePassword" json:"simple_password,omitempty"`
	State                *bool    `protobuf:"varint,38,opt,name=state" json:"state,omitempty"`
	StateAbbrev          *bool    `protobuf:"varint,39,opt,name=state_abbrev,json=stateAbbrev" json:"state_abbrev,omitempty"`
	Street               *bool    `protobuf:"varint,40,opt,name=street" json:"street,omitempty"`
	StreetAddress        *bool    `protobuf:"varint,41,opt,name=street_address,json=streetAddress" json:"street_address,omitempty"`
	Title                *bool    `protobuf:"varint,42,opt,name=title" json:"title,omitempty"`
	TopLevelDomain       *bool    `protobuf:"varint,43,opt,name=top_level_domain,json=topLevelDomain" json:"top_level_domain,omitempty"`
	UserAgent            *bool    `protobuf:"varint,44,opt,name=user_agent,json=userAgent" json:"user_agent,omitempty"`
	UserName             *bool    `protobuf:"varint,45,opt,name=user_name,json=userName" json:"user_name,omitempty"`
	WeekDay              *bool    `protobuf:"varint,46,opt,name=week_day,json=weekDay" json:"week_day,omitempty"`
	WeekDayShort         *bool    `protobuf:"varint,47,opt,name=week_day_short,json=weekDayShort" json:"week_day_short,omitempty"`
	Zip                  *bool    `protobuf:"varint,48,opt,name=zip" json:"zip,omitempty"`
	Coordinates          *bool    `protobuf:"varint,49,opt,name=coordinates" json:"coordinates,omitempty"`
	Date                 *bool    `protobuf:"varint,50,opt,name=date" json:"date,omitempty"`
	Datetime             *bool    `protobuf:"varint,51,opt,name=datetime" json:"datetime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FieldMock) Reset()         { *m = FieldMock{} }
func (m *FieldMock) String() string { return proto.CompactTextString(m) }
func (*FieldMock) ProtoMessage()    {}
func (*FieldMock) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8c8c9b9c4c355de, []int{0}
}
func (m *FieldMock) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FieldMock.Unmarshal(m, b)
}
func (m *FieldMock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FieldMock.Marshal(b, m, deterministic)
}
func (m *FieldMock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FieldMock.Merge(m, src)
}
func (m *FieldMock) XXX_Size() int {
	return xxx_messageInfo_FieldMock.Size(m)
}
func (m *FieldMock) XXX_DiscardUnknown() {
	xxx_messageInfo_FieldMock.DiscardUnknown(m)
}

var xxx_messageInfo_FieldMock proto.InternalMessageInfo

func (m *FieldMock) GetString_() []string {
	if m != nil {
		return m.String_
	}
	return nil
}

func (m *FieldMock) GetWord() bool {
	if m != nil && m.Word != nil {
		return *m.Word
	}
	return false
}

func (m *FieldMock) GetWords() bool {
	if m != nil && m.Words != nil {
		return *m.Words
	}
	return false
}

func (m *FieldMock) GetWordsn() int32 {
	if m != nil && m.Wordsn != nil {
		return *m.Wordsn
	}
	return 0
}

func (m *FieldMock) GetIntn() int32 {
	if m != nil && m.Intn != nil {
		return *m.Intn
	}
	return 0
}

func (m *FieldMock) GetFullname() bool {
	if m != nil && m.Fullname != nil {
		return *m.Fullname
	}
	return false
}

func (m *FieldMock) GetFirstname() bool {
	if m != nil && m.Firstname != nil {
		return *m.Firstname
	}
	return false
}

func (m *FieldMock) GetLastname() bool {
	if m != nil && m.Lastname != nil {
		return *m.Lastname
	}
	return false
}

func (m *FieldMock) GetParagraph() bool {
	if m != nil && m.Paragraph != nil {
		return *m.Paragraph
	}
	return false
}

func (m *FieldMock) GetParagraphs() bool {
	if m != nil && m.Paragraphs != nil {
		return *m.Paragraphs
	}
	return false
}

func (m *FieldMock) GetParagraphsn() int32 {
	if m != nil && m.Paragraphsn != nil {
		return *m.Paragraphsn
	}
	return 0
}

func (m *FieldMock) GetUuid() bool {
	if m != nil && m.Uuid != nil {
		return *m.Uuid
	}
	return false
}

func (m *FieldMock) GetEmail() bool {
	if m != nil && m.Email != nil {
		return *m.Email
	}
	return false
}

func (m *FieldMock) GetPhone() bool {
	if m != nil && m.Phone != nil {
		return *m.Phone
	}
	return false
}

func (m *FieldMock) GetCompany() bool {
	if m != nil && m.Company != nil {
		return *m.Company
	}
	return false
}

func (m *FieldMock) GetBrand() bool {
	if m != nil && m.Brand != nil {
		return *m.Brand
	}
	return false
}

func (m *FieldMock) GetProduct() bool {
	if m != nil && m.Product != nil {
		return *m.Product
	}
	return false
}

func (m *FieldMock) GetColor() bool {
	if m != nil && m.Color != nil {
		return *m.Color
	}
	return false
}

func (m *FieldMock) GetHexcolor() bool {
	if m != nil && m.Hexcolor != nil {
		return *m.Hexcolor
	}
	return false
}

func (m *FieldMock) GetPrefix() []string {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *FieldMock) GetFloatn() int32 {
	if m != nil && m.Floatn != nil {
		return *m.Floatn
	}
	return 0
}

func (m *FieldMock) GetRepeatn() int32 {
	if m != nil && m.Repeatn != nil {
		return *m.Repeatn
	}
	return 0
}

func (m *FieldMock) GetIntstr() bool {
	if m != nil && m.Intstr != nil {
		return *m.Intstr
	}
	return false
}

func (m *FieldMock) GetFloatstr() bool {
	if m != nil && m.Floatstr != nil {
		return *m.Floatstr
	}
	return false
}

func (m *FieldMock) GetUrl() bool {
	if m != nil && m.Url != nil {
		return *m.Url
	}
	return false
}

func (m *FieldMock) GetSuffix() []string {
	if m != nil {
		return m.Suffix
	}
	return nil
}

func (m *FieldMock) GetCity() bool {
	if m != nil && m.City != nil {
		return *m.City
	}
	return false
}

func (m *FieldMock) GetCountry() bool {
	if m != nil && m.Country != nil {
		return *m.Country
	}
	return false
}

func (m *FieldMock) GetContinent() bool {
	if m != nil && m.Continent != nil {
		return *m.Continent
	}
	return false
}

func (m *FieldMock) GetGender() bool {
	if m != nil && m.Gender != nil {
		return *m.Gender
	}
	return false
}

func (m *FieldMock) GetIpv4() bool {
	if m != nil && m.Ipv4 != nil {
		return *m.Ipv4
	}
	return false
}

func (m *FieldMock) GetIpv6() bool {
	if m != nil && m.Ipv6 != nil {
		return *m.Ipv6
	}
	return false
}

func (m *FieldMock) GetLatitude() bool {
	if m != nil && m.Latitude != nil {
		return *m.Latitude
	}
	return false
}

func (m *FieldMock) GetLongitude() bool {
	if m != nil && m.Longitude != nil {
		return *m.Longitude
	}
	return false
}

func (m *FieldMock) GetMonth() bool {
	if m != nil && m.Month != nil {
		return *m.Month
	}
	return false
}

func (m *FieldMock) GetMonthShort() bool {
	if m != nil && m.MonthShort != nil {
		return *m.MonthShort
	}
	return false
}

func (m *FieldMock) GetSimplePassword() bool {
	if m != nil && m.SimplePassword != nil {
		return *m.SimplePassword
	}
	return false
}

func (m *FieldMock) GetState() bool {
	if m != nil && m.State != nil {
		return *m.State
	}
	return false
}

func (m *FieldMock) GetStateAbbrev() bool {
	if m != nil && m.StateAbbrev != nil {
		return *m.StateAbbrev
	}
	return false
}

func (m *FieldMock) GetStreet() bool {
	if m != nil && m.Street != nil {
		return *m.Street
	}
	return false
}

func (m *FieldMock) GetStreetAddress() bool {
	if m != nil && m.StreetAddress != nil {
		return *m.StreetAddress
	}
	return false
}

func (m *FieldMock) GetTitle() bool {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return false
}

func (m *FieldMock) GetTopLevelDomain() bool {
	if m != nil && m.TopLevelDomain != nil {
		return *m.TopLevelDomain
	}
	return false
}

func (m *FieldMock) GetUserAgent() bool {
	if m != nil && m.UserAgent != nil {
		return *m.UserAgent
	}
	return false
}

func (m *FieldMock) GetUserName() bool {
	if m != nil && m.UserName != nil {
		return *m.UserName
	}
	return false
}

func (m *FieldMock) GetWeekDay() bool {
	if m != nil && m.WeekDay != nil {
		return *m.WeekDay
	}
	return false
}

func (m *FieldMock) GetWeekDayShort() bool {
	if m != nil && m.WeekDayShort != nil {
		return *m.WeekDayShort
	}
	return false
}

func (m *FieldMock) GetZip() bool {
	if m != nil && m.Zip != nil {
		return *m.Zip
	}
	return false
}

func (m *FieldMock) GetCoordinates() bool {
	if m != nil && m.Coordinates != nil {
		return *m.Coordinates
	}
	return false
}

func (m *FieldMock) GetDate() bool {
	if m != nil && m.Date != nil {
		return *m.Date
	}
	return false
}

func (m *FieldMock) GetDatetime() bool {
	if m != nil && m.Datetime != nil {
		return *m.Datetime
	}
	return false
}

var E_Field = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*FieldMock)(nil),
	Field:         66300,
	Name:          "grpcmock.field",
	Tag:           "bytes,66300,opt,name=field",
	Filename:      "grpcmock.proto",
}

func init() {
	proto.RegisterType((*FieldMock)(nil), "grpcmock.FieldMock")
	proto.RegisterExtension(E_Field)
}

func init() { proto.RegisterFile("grpcmock.proto", fileDescriptor_f8c8c9b9c4c355de) }

var fileDescriptor_f8c8c9b9c4c355de = []byte{
	// 802 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x94, 0x4d, 0x93, 0x13, 0x37,
	0x10, 0x86, 0x6b, 0x63, 0x0c, 0xb6, 0xbc, 0x18, 0x47, 0x10, 0xd2, 0x2c, 0x2c, 0x18, 0x02, 0xc1,
	0xf9, 0xc0, 0xce, 0x3a, 0x29, 0x52, 0xc9, 0x6d, 0x29, 0x2a, 0x87, 0x54, 0xbe, 0xca, 0xb9, 0xe5,
	0x32, 0x25, 0xcf, 0xc8, 0x63, 0xd5, 0xce, 0x48, 0x2a, 0x49, 0xb3, 0x60, 0xee, 0xf9, 0x83, 0xf9,
	0x3d, 0x39, 0x50, 0xdd, 0x3d, 0x33, 0xbb, 0x27, 0xf7, 0xf3, 0x76, 0x4b, 0x1a, 0xbf, 0xdd, 0x92,
	0x98, 0x96, 0xc1, 0xe7, 0xb5, 0xcb, 0x2f, 0x96, 0x3e, 0xb8, 0xe4, 0xe4, 0xa8, 0xe3, 0x93, 0x79,
	0xe9, 0x5c, 0x59, 0xe9, 0x15, 0xe9, 0xdb, 0x66, 0xb7, 0x2a, 0x74, 0xcc, 0x83, 0xf1, 0xc9, 0x05,
	0xae, 0x7d, 0xf6, 0x9f, 0x10, 0xe3, 0x5f, 0x8c, 0xae, 0x8a, 0xdf, 0x5d, 0x7e, 0x21, 0xef, 0x8b,
	0x9b, 0x31, 0x05, 0x63, 0x4b, 0x38, 0x9a, 0x0f, 0x16, 0xe3, 0x4d, 0x4b, 0x52, 0x8a, 0x1b, 0xef,
	0x5c, 0x28, 0xe0, 0x93, 0xf9, 0xd1, 0x62, 0xb4, 0xa1, 0x58, 0xde, 0x13, 0x43, 0xfc, 0x8d, 0x30,
	0x20, 0x91, 0x01, 0x77, 0xa0, 0xc0, 0xc2, 0x8d, 0xf9, 0xd1, 0x62, 0xb8, 0x69, 0x09, 0x77, 0x30,
	0x36, 0x59, 0x18, 0x92, 0x4a, 0xb1, 0x3c, 0x11, 0xa3, 0x5d, 0x53, 0x55, 0x56, 0xd5, 0x1a, 0x6e,
	0xd2, 0x26, 0x3d, 0xcb, 0x47, 0x62, 0xbc, 0x33, 0x21, 0x26, 0x4a, 0xde, 0xa2, 0xe4, 0x95, 0x80,
	0x2b, 0x2b, 0xd5, 0x26, 0x47, 0xbc, 0xb2, 0x63, 0x5c, 0xe9, 0x55, 0x50, 0x65, 0x50, 0x7e, 0x0f,
	0x63, 0x5e, 0xd9, 0x0b, 0xf2, 0xb1, 0x10, 0x3d, 0x44, 0x10, 0x94, 0xbe, 0xa6, 0xc8, 0xb9, 0x98,
	0x5c, 0x91, 0x85, 0x09, 0x7d, 0xee, 0x75, 0x09, 0xff, 0x49, 0xd3, 0x98, 0x02, 0x8e, 0xd9, 0x0b,
	0x8c, 0xd1, 0x0b, 0x5d, 0x2b, 0x53, 0xc1, 0x6d, 0xf6, 0x82, 0x00, 0x55, 0xbf, 0x77, 0x56, 0xc3,
	0x94, 0x55, 0x02, 0x09, 0xe2, 0x56, 0xee, 0x6a, 0xaf, 0xec, 0x01, 0xee, 0x90, 0xde, 0x21, 0xd6,
	0x6f, 0x83, 0xb2, 0x05, 0xcc, 0xb8, 0x9e, 0x00, 0xeb, 0x7d, 0x70, 0x45, 0x93, 0x27, 0xf8, 0x94,
	0xeb, 0x5b, 0xc4, 0xfa, 0xdc, 0x55, 0x2e, 0x80, 0xe4, 0x7a, 0x02, 0xf4, 0x66, 0xaf, 0xdf, 0x73,
	0xe2, 0x2e, 0x7b, 0xd3, 0x31, 0x76, 0xc7, 0x07, 0xbd, 0x33, 0xef, 0xe1, 0x1e, 0xf7, 0x97, 0x09,
	0xf5, 0x5d, 0xe5, 0x54, 0xb2, 0xf0, 0x19, 0x77, 0x8d, 0x09, 0xcf, 0x0e, 0xda, 0x6b, 0x4c, 0xdc,
	0xa7, 0x44, 0x87, 0xb8, 0xc2, 0xd8, 0x14, 0x53, 0x80, 0xcf, 0xe9, 0x8c, 0x96, 0xa8, 0xa7, 0xb8,
	0x16, 0x33, 0xd0, 0xf6, 0xb4, 0x65, 0x39, 0x13, 0x83, 0x26, 0x54, 0xf0, 0x80, 0x64, 0x0c, 0x69,
	0xde, 0x9a, 0x1d, 0x7e, 0xcf, 0x49, 0x3b, 0x6f, 0x44, 0xe8, 0x71, 0x6e, 0xd2, 0x01, 0x1e, 0xb2,
	0xc7, 0x18, 0xb3, 0x6f, 0x8d, 0x4d, 0xe1, 0x00, 0x8f, 0x3a, 0xdf, 0x08, 0xb1, 0xe3, 0xb9, 0xb3,
	0xc9, 0x58, 0x6d, 0x13, 0x9c, 0x72, 0xc7, 0x7b, 0x01, 0xcf, 0x28, 0xb5, 0x2d, 0x74, 0x80, 0xc7,
	0xfc, 0xa5, 0x4c, 0x34, 0x91, 0xfe, 0xf2, 0x07, 0x78, 0xc2, 0x67, 0x60, 0xdc, 0x6a, 0xaf, 0x61,
	0xde, 0x6b, 0xaf, 0x79, 0xd6, 0x92, 0x49, 0x4d, 0xa1, 0xe1, 0x69, 0x37, 0x6b, 0xcc, 0x78, 0x72,
	0xe5, 0x6c, 0xc9, 0xc9, 0x67, 0x7c, 0x72, 0x2f, 0x60, 0x7f, 0x6a, 0x67, 0xd3, 0x1e, 0xbe, 0xe0,
	0xfe, 0x10, 0xc8, 0x27, 0x62, 0x42, 0x41, 0x16, 0xf7, 0x2e, 0x24, 0x78, 0xce, 0x23, 0x48, 0xd2,
	0xdf, 0xa8, 0xc8, 0x97, 0xe2, 0x4e, 0x34, 0xb5, 0xaf, 0x74, 0xe6, 0x55, 0x8c, 0x74, 0xef, 0x5e,
	0x50, 0xd1, 0x94, 0xe5, 0xbf, 0x5a, 0x15, 0xf7, 0x8f, 0x49, 0x25, 0x0d, 0x5f, 0xf2, 0xfe, 0x04,
	0xf2, 0xa9, 0x38, 0xa6, 0x20, 0x53, 0xdb, 0x6d, 0xd0, 0x97, 0xf0, 0x92, 0x92, 0x13, 0xd2, 0xce,
	0x49, 0x6a, 0xaf, 0xb9, 0xd6, 0x09, 0x16, 0x6c, 0x09, 0x93, 0x7c, 0x21, 0xa6, 0x1c, 0x65, 0xaa,
	0x28, 0x82, 0x8e, 0x11, 0xbe, 0xa2, 0xfc, 0x6d, 0x56, 0xcf, 0x59, 0xc4, 0x73, 0x93, 0x49, 0x95,
	0x86, 0xaf, 0xf9, 0x5c, 0x02, 0xb9, 0x10, 0xb3, 0xe4, 0x7c, 0x56, 0xe9, 0x4b, 0x5d, 0x65, 0x85,
	0xab, 0x95, 0xb1, 0xf0, 0x0d, 0x7f, 0x77, 0x72, 0xfe, 0x37, 0x94, 0xdf, 0x92, 0x2a, 0x4f, 0x85,
	0x68, 0xa2, 0x0e, 0x99, 0x2a, 0xb1, 0x61, 0xdf, 0xb2, 0x6d, 0xa8, 0x9c, 0xa3, 0x20, 0x1f, 0x0a,
	0x82, 0x8c, 0x6e, 0xf7, 0x2b, 0x76, 0x1c, 0x85, 0x3f, 0xf0, 0x76, 0x3f, 0x10, 0xa3, 0x77, 0x5a,
	0x5f, 0x64, 0x85, 0x3a, 0xc0, 0x92, 0xc7, 0x00, 0xf9, 0xad, 0x3a, 0xc8, 0xe7, 0x62, 0xda, 0xa5,
	0x5a, 0x6f, 0x57, 0x54, 0x70, 0xdc, 0x16, 0xb0, 0xbb, 0x33, 0x31, 0xf8, 0x60, 0x3c, 0x7c, 0xc7,
	0x43, 0xf8, 0xc1, 0x78, 0xbc, 0xf2, 0xb9, 0x73, 0xa1, 0x30, 0x56, 0x25, 0x1d, 0xe1, 0x8c, 0xfd,
	0xba, 0x26, 0xe1, 0x58, 0x14, 0xe8, 0xf3, 0x9a, 0xc7, 0x02, 0x63, 0x1c, 0x0b, 0xfc, 0x4d, 0xa6,
	0xd6, 0xf0, 0x3d, 0x7f, 0x64, 0xc7, 0x3f, 0xff, 0x2a, 0x86, 0x3b, 0x7c, 0x53, 0xe5, 0xe9, 0x92,
	0x1f, 0xe0, 0x65, 0xf7, 0x00, 0x2f, 0xe9, 0xad, 0xfd, 0xd3, 0x27, 0xe3, 0x6c, 0x84, 0xff, 0xff,
	0xc5, 0x47, 0x72, 0xb2, 0xbe, 0xbb, 0xec, 0x5f, 0xf0, 0xfe, 0x2d, 0xde, 0xf0, 0x16, 0x6f, 0x7e,
	0xfa, 0xe7, 0xc7, 0xd2, 0xa4, 0x7d, 0xb3, 0x5d, 0xe6, 0xae, 0x5e, 0xbd, 0x69, 0x4c, 0x55, 0x18,
	0x5b, 0x6e, 0xdc, 0xd6, 0x25, 0x93, 0xc7, 0x55, 0x3c, 0x5b, 0xbf, 0xa2, 0xcd, 0xaf, 0xde, 0xf8,
	0x78, 0xb6, 0xa6, 0xf8, 0x63, 0x00, 0x00, 0x00, 0xff, 0xff, 0x73, 0x42, 0xf4, 0x9e, 0x18, 0x06,
	0x00, 0x00,
}
